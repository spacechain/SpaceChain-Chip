library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.cpu2j0_pack.all;

-- This entity connects two data bus masters (m1 and m2) with one data bus
-- slave. The two masters have a fixed priority. If both m1 and m2 raise their
-- EN lines in the same cycle, then M1 will always win and perform it's read or
-- write first while M2 must wait. If M1 continually has read or writes, then
-- M2 can be starve, so take care when choosing the bus master order

entity multi_master_bus_muxffwbs is port (
  rst : in std_logic;
  clk : in std_logic;
  m1_i : out cpu_data_i_t;
  m1_o : in cpu_data_o_t;
  m1_route_byte : in std_logic; -- routing signal synchrozize with m1_o
  m2_i : out cpu_data_i_t;
  m2_o : in cpu_data_o_t;
  m2_route_byte : in std_logic; -- routing signal synchrozize with m2_o
  slave_i : in cpu_data_i_t;
  slave_o : out cpu_data_o_t;
  slave_wordbus_en : out std_logic;
  slave_bytebus_en : out std_logic;
  sel_m2 : out std_logic
  );
end multi_master_bus_muxffwbs;

architecture for_dualbus of multi_master_bus_muxffwbs is
  type state_t is (M1, M2);
  type bus_mux_reg_t is record
    state : state_t;
    m1 : cpu_data_i_t;
    m2 : cpu_data_i_t;
    slave : cpu_data_o_t;
    slave_ack : std_logic;
    m1_o_1delay : cpu_data_o_t;
    m2_o_1delay : cpu_data_o_t;
    sel_m2 : std_logic;
    m1_route_byte : std_logic;
    m2_route_byte : std_logic;
  end record;
  constant BUS_MUX_RESET : bus_mux_reg_t := (
                              state => M1,
                              m1 => ((others => '0'), '0'),
                              m2 => ((others => '0'), '0'),
                              slave => ('0', (others => '0'), '0', '0', "0000",
                                        (others => '0')),
                              slave_ack => '0',
                              m1_o_1delay => ('0', (others => '0'), '0', '0',
                                             (others => '0'), (others => '0')),
                              m2_o_1delay => ('0', (others => '0'), '0', '0',
                                             (others => '0'), (others => '0')),
                              sel_m2 => '0',
                              m1_route_byte => '0',
                              m2_route_byte => '0');
  register variable this : bus_mux_reg_t reset := BUS_MUX_RESET;
begin
  p1 : process(this, m1_o, m2_o, m1_route_byte, m2_route_byte, slave_i)
    register this when clk='1' and clk'event reset when rst='1';
    variable var_slave_wordbus_en : std_logic;
    variable var_slave_bytebus_en : std_logic;
  begin
    if ((this.m1_o_1delay.en = '1' and this.m1.ack = '0') or 
        (this.m2_o_1delay.en = '0' or  this.m2.ack = '1')) and
      (this.state = M1 or (this.state = M2 and this.slave_ack = '1'))
    then
      this.state := M1;
      this.m1.ack := slave_i.ack;
      this.m2.ack := '0';
      this.slave := this.m1_o_1delay;
      this.sel_m2 := '0';
      if(this.slave_ack = '1') then
        this.slave.en := '0';
        this.slave.wr := '0';
        this.slave.we := x"0";
      end if;
      var_slave_wordbus_en := this.slave.en and -- this.slave is now combi.
                              (not this.m1_route_byte);
      var_slave_bytebus_en := this.slave.en and
                              this.m1_route_byte;
    else
      -- Only switch to M2 if m1.en = '0' and m2.en = '1'.
      -- Only stay in M2 if previous state was M2 and ack = '0'.
      this.state := M2;
      this.m1.ack := '0';
      this.m2.ack := slave_i.ack;
      this.slave := this.m2_o_1delay;
      this.sel_m2 := '1';
      if(this.slave_ack = '1') then
        this.slave.en := '0';
        this.slave.wr := '0';
        this.slave.we := x"0";
      end if;
      var_slave_wordbus_en := this.slave.en and -- this.slave is now combi.
                              (not this.m2_route_byte);
      var_slave_bytebus_en := this.slave.en and
                              this.m2_route_byte;
    end if;
    this.slave_ack := slave_i.ack;
    this.m1.d := slave_i.d;
    this.m2.d := slave_i.d;
    this.m1_o_1delay := m1_o;
    this.m2_o_1delay := m2_o;
    this.m1_route_byte := m1_route_byte;
    this.m2_route_byte := m2_route_byte;
    -- output drive
    slave_wordbus_en <= var_slave_wordbus_en;
    slave_bytebus_en <= var_slave_bytebus_en;
  end process;

  m1_i <= this'combinatorial.m1;
  m2_i <= this'combinatorial.m2;
  slave_o <= this'combinatorial.slave;
  sel_m2 <= this'combinatorial.sel_m2;
end for_dualbus;

