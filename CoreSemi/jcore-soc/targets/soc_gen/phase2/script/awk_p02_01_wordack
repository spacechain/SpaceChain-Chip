BEGIN{
  count_word_norm_device = 0;
  entity_byte = 0;
  state = -1;
  byte_dma_hit = 0;
  soc_gen_comment1 = "-- ************************************";
  soc_gen_comment2 =    "******************************";
  soc_gen_comment3 = "-- This file is generated by soc_gen and will ";
  soc_gen_comment4 = "be overwritten next time";
  soc_gen_comment5 = "-- the tool is run. See soc_top/README for ";
  soc_gen_comment6 = "information on running soc_gen.";
}
{
  if     ($1 == "#bus_word") {
    word_norm_device         [count_word_norm_device] = $2;
    word_norm_device_lowshort[count_word_norm_device] = tolower($2);
    sub ("dev_", "", 
    word_norm_device_lowshort[count_word_norm_device]);
    count_word_norm_device++;
  }
  else if(state == -1) {
    if($1 ~ /--/) {
      print $0;
      state = 0;
      first_comment_line = $0;
    }
    else {
      justmemo_vhd_head_not_arriving_no_print = 1;
    }
  }
  else {
    if (state == 0) {
      printf("%s%s\n", soc_gen_comment1, soc_gen_comment2);
      printf("%s%s\n", soc_gen_comment1, soc_gen_comment2);
      printf("%s%s\n", soc_gen_comment3, soc_gen_comment4);
      printf("%s%s\n", soc_gen_comment5, soc_gen_comment6);
      printf("%s%s\n", soc_gen_comment1, soc_gen_comment2);
      printf("%s%s\n", soc_gen_comment1, soc_gen_comment2);
      printf("%s%s\n", soc_gen_comment1, soc_gen_comment2);
      print "library ieee;";
      print "use ieee.std_logic_1164.all;";
      print "";
      print "entity word_ack_gen is";
      print "  port (";
      print "    adr : in std_logic_vector( 31 downto 0);";
      print "    word_bus_en : in std_logic ;";
      for (i = 0; i < count_word_norm_device; i++) {
        word_ack_gen_port_name = tolower(word_norm_device[i]);
        sub("dev", "ack_thru_in", word_ack_gen_port_name);
        printf( "    %-20s : in std_logic ;\n",
          word_ack_gen_port_name);
      }
      print "    word_ack : out std_logic";
      print "  );";
      print "end entity;";
      print "";
      print "architecture impl of word_ack_gen is";
      state = 1;
    }
    else if(($1 == "type") && ($2 == "device_t")) {
      print $0;
    } 
    else if($1 == "function") { 
      print "    function decode_address_wag (addr : ";
      print "      std_logic_vector(31 downto 0)) return device_t is";
      state = 2;
    }
    else if(state == 2) {
      print $0;
      if($1 == "end;") {
        print "begin";
        print "    ack_gen : process (";
        for(i = 0; i < count_word_norm_device; i++) {
          if((i % 3) == 0) { printf("      "); }
          printf("ack_thru_in_%s", word_norm_device_lowshort[i]);
          if((i == (count_word_norm_device - 1) ||
             ((i % 3) == 2))) { print ","     }
          else                { printf(", "); }
        }
        print "      word_bus_en, adr";
        print "      )";
        print "      variable active_dev : device_t;";
        print "    begin";
        print "      active_dev := decode_address_wag ( adr );";
        print "      case active_dev is";
        for(i = 0; i < count_word_norm_device; i++) {
          printf("        when %-12s => word_ack <= ack_thru_in_%s;\n",
            word_norm_device[i], word_norm_device_lowshort[i]);
        }
        print "        when others       => word_ack <= word_bus_en;";
        print "      end case;";
        print "    end process;";
        print "end impl;";
        state = 3;
      }
    }
  }
}
